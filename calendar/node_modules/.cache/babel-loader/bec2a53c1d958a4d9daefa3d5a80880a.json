{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Ciklum\\\\Calendar_React\\\\calendar\\\\src\\\\views\\\\main\\\\main-view.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { Button, Table } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nimport JSON5 from 'json5';\nimport { toast } from 'react-toastify';\nimport Selector from '../../components/selector/selector';\nimport CreateEventView from '../create/creat-event-view';\nimport { participants, daysArray, timeArray } from '../../data/calendar-data';\nimport { eventsSingleton } from '../../sevices/API-service';\nimport styles from './MainView.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MainView({\n  user\n}) {\n  _s();\n\n  const [meetings, setMeetings] = useState([]);\n  const [meetingsByParticipant, setMeetingsByParticipant] = useState([]);\n  const [selectedParticipant, setSelectedParticipant] = useState('');\n  const [modalShow, setModalShow] = useState(false); // open modal fn\n\n  const handleModalShow = () => setModalShow(true); // close modal fn\n\n\n  const handleModalClose = () => setModalShow(false); // sync validation form\n\n\n  const validateForm = (participantName, eventName, day, time) => {\n    if (eventName === '') {\n      toast.error('Please type event name!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n      return false;\n    }\n\n    if (day === '') {\n      toast.error('Please choose day!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n      return false;\n    }\n\n    if (time === '') {\n      toast.error('Please choose time!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n      return false;\n    }\n\n    if (participantName.length === 0) {\n      toast.error('Please choose participant!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n      return false;\n    }\n\n    const isAvailableTime = meetings.filter(meeting => meeting.data.info.day === day && meeting.data.info.time === time);\n\n    if (isAvailableTime.length) {\n      toast.error('Please choose other time or date!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n      return false;\n    }\n\n    return true;\n  }; // submit form\n\n\n  const handleSubmit = async (participantName, eventName, day, time) => {\n    if (!(await validateForm(participantName, eventName, day, time))) {\n      return;\n    }\n\n    const meeting = {\n      title: `'${eventName}'`,\n      participants: participantName,\n      info: {\n        day,\n        time\n      }\n    };\n    const stringifyMeeting = JSON.stringify(meeting).replace(/\"/g, '');\n    await eventsSingleton.addEvent(`{\n    \"data\":\"${stringifyMeeting}\"\n  }`).then(({\n      data,\n      status\n    }) => {\n      if (status === 200) {\n        toast.success('Event succesfully added!', {\n          position: toast.POSITION.TOP_CENTER\n        });\n        const parsedMeeting = {\n          id: data.id,\n          data: JSON5.parse(data.data)\n        };\n        setMeetings(prevMeetings => [...prevMeetings, parsedMeeting]);\n      }\n    });\n    setModalShow(false);\n  }; // select participant fn\n\n\n  const getParticipant = value => {\n    if (!value) {\n      setSelectedParticipant('');\n      return;\n    }\n\n    setSelectedParticipant(Number(value));\n  }; // deleting event on delete button click\n\n\n  const deleteEvent = async event => {\n    const deleteEl = event.target;\n\n    if (deleteEl.tagName === 'BUTTON') {\n      const result = window.confirm(`Are you shure you want to delete \"${deleteEl.parentNode.textContent}\" event?`);\n\n      if (result) {\n        const meetingId = event.target.getAttribute('data-id');\n        await eventsSingleton.deleteEvent(meetingId).then(status => {\n          if (status === 204) {\n            toast.success('Event succesfully deleted!', {\n              position: toast.POSITION.TOP_CENTER\n            });\n            deleteEl.parentNode.innerHTML = '';\n          }\n        });\n      }\n    }\n  }; // fetching meeting at first render\n\n\n  useEffect(() => {\n    async function fetchData() {\n      const {\n        data,\n        status\n      } = await eventsSingleton.getEvent();\n\n      if (data) {\n        const parsedMeetings = data === null || data === void 0 ? void 0 : data.map(event => ({\n          id: event.id,\n          data: JSON5.parse(event.data)\n        }));\n        setMeetings(parsedMeetings);\n        toast.success(`Events succesfully get with status: ${status}!`, {\n          position: toast.POSITION.TOP_CENTER\n        });\n        return;\n      }\n\n      toast.success('There are no events in your calendar yet!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n      setMeetings([]);\n    }\n\n    fetchData();\n  }, []); // filter events by selected participant\n\n  useEffect(() => {\n    selectedParticipant ? setMeetingsByParticipant(meetings.filter(meeting => {\n      return meeting.data.participants.includes(selectedParticipant);\n    })) : setMeetingsByParticipant(meetings);\n  }, [selectedParticipant, meetings]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(Selector, {\n        selectArray: participants,\n        onChange: getParticipant,\n        multiple: false,\n        selectorName: \"participant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        disabled: !user.isAdmin,\n        onClick: () => handleModalShow(),\n        children: \"Create event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      size: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"#\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), daysArray.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: day.name\n          }, day.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: timeArray.map((timeObj, index) => {\n          const availableMeetings = meetingsByParticipant === null || meetingsByParticipant === void 0 ? void 0 : meetingsByParticipant.filter(meeting => meeting.data.info.time === index);\n          const days = new Array(5).fill('');\n          availableMeetings === null || availableMeetings === void 0 ? void 0 : availableMeetings.map(meeting => {\n            const {\n              day\n            } = meeting.data.info;\n            days[day] = {\n              name: `${meeting.data.title}`,\n              id: meeting.id,\n              className: 'succes'\n            };\n            return true;\n          });\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: timeObj.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this), days.map((day, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n              className: styles.td,\n              children: [day.name || '', day.name && /*#__PURE__*/_jsxDEV(Button, {\n                \"data-id\": day.id,\n                variant: \"info\",\n                disabled: !user.isAdmin,\n                onClick: e => deleteEvent(e),\n                className: styles.deleteBtn,\n                children: \"x\"\n              }, day.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 23\n              }, this)]\n            }, day.id || index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this))]\n          }, timeObj.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), modalShow && /*#__PURE__*/_jsxDEV(CreateEventView, {\n      modalShow: modalShow,\n      handleSubmit: handleSubmit,\n      handleClose: handleModalClose,\n      controlOptions: {\n        participants,\n        daysArray,\n        timeArray\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MainView, \"dvGAnj1xqGXx7TE+JwaUD01OQM0=\");\n\n_c = MainView;\nMainView.propTypes = {\n  user: PropTypes.object\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"MainView\");","map":{"version":3,"sources":["D:/Projects/Ciklum/Calendar_React/calendar/src/views/main/main-view.js"],"names":["PropTypes","Button","Table","useEffect","useState","JSON5","toast","Selector","CreateEventView","participants","daysArray","timeArray","eventsSingleton","styles","MainView","user","meetings","setMeetings","meetingsByParticipant","setMeetingsByParticipant","selectedParticipant","setSelectedParticipant","modalShow","setModalShow","handleModalShow","handleModalClose","validateForm","participantName","eventName","day","time","error","position","POSITION","TOP_CENTER","length","isAvailableTime","filter","meeting","data","info","handleSubmit","title","stringifyMeeting","JSON","stringify","replace","addEvent","then","status","success","parsedMeeting","id","parse","prevMeetings","getParticipant","value","Number","deleteEvent","event","deleteEl","target","tagName","result","window","confirm","parentNode","textContent","meetingId","getAttribute","innerHTML","fetchData","getEvent","parsedMeetings","map","includes","header","isAdmin","name","timeObj","index","availableMeetings","days","Array","fill","className","td","e","deleteBtn","propTypes","object"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport { useEffect, useState } from 'react';\r\nimport JSON5 from 'json5';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport Selector from '../../components/selector/selector';\r\nimport CreateEventView from '../create/creat-event-view';\r\nimport { participants, daysArray, timeArray } from '../../data/calendar-data';\r\n\r\nimport { eventsSingleton } from '../../sevices/API-service';\r\n\r\nimport styles from './MainView.module.css';\r\n\r\nexport default function MainView({ user }) {\r\n  const [meetings, setMeetings] = useState([]);\r\n  const [meetingsByParticipant, setMeetingsByParticipant] = useState([]);\r\n  const [selectedParticipant, setSelectedParticipant] = useState('');\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  // open modal fn\r\n  const handleModalShow = () => setModalShow(true);\r\n\r\n  // close modal fn\r\n  const handleModalClose = () => setModalShow(false);\r\n\r\n  // sync validation form\r\n  const validateForm = (participantName, eventName, day, time) => {\r\n    if (eventName === '') {\r\n      toast.error('Please type event name!', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return false;\r\n    }\r\n    if (day === '') {\r\n      toast.error('Please choose day!', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return false;\r\n    }\r\n    if (time === '') {\r\n      toast.error('Please choose time!', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return false;\r\n    }\r\n    if (participantName.length === 0) {\r\n      toast.error('Please choose participant!', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    const isAvailableTime = meetings.filter(\r\n      meeting =>\r\n        meeting.data.info.day === day && meeting.data.info.time === time,\r\n    );\r\n    if (isAvailableTime.length) {\r\n      toast.error('Please choose other time or date!', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // submit form\r\n  const handleSubmit = async (participantName, eventName, day, time) => {\r\n    if (!(await validateForm(participantName, eventName, day, time))) {\r\n      return;\r\n    }\r\n    const meeting = {\r\n      title: `'${eventName}'`,\r\n      participants: participantName,\r\n      info: {\r\n        day,\r\n        time,\r\n      },\r\n    };\r\n\r\n    const stringifyMeeting = JSON.stringify(meeting).replace(/\"/g, '');\r\n    await eventsSingleton\r\n      .addEvent(\r\n        `{\r\n    \"data\":\"${stringifyMeeting}\"\r\n  }`,\r\n      )\r\n      .then(({ data, status }) => {\r\n        if (status === 200) {\r\n          toast.success('Event succesfully added!', {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          const parsedMeeting = {\r\n            id: data.id,\r\n            data: JSON5.parse(data.data),\r\n          };\r\n          setMeetings(prevMeetings => [...prevMeetings, parsedMeeting]);\r\n        }\r\n      });\r\n    setModalShow(false);\r\n  };\r\n\r\n  // select participant fn\r\n  const getParticipant = value => {\r\n    if (!value) {\r\n      setSelectedParticipant('');\r\n      return;\r\n    }\r\n    setSelectedParticipant(Number(value));\r\n  };\r\n\r\n  // deleting event on delete button click\r\n  const deleteEvent = async event => {\r\n    const deleteEl = event.target;\r\n    if (deleteEl.tagName === 'BUTTON') {\r\n      const result = window.confirm(\r\n        `Are you shure you want to delete \"${deleteEl.parentNode.textContent}\" event?`,\r\n      );\r\n      if (result) {\r\n        const meetingId = event.target.getAttribute('data-id');\r\n\r\n        await eventsSingleton.deleteEvent(meetingId).then(status => {\r\n          if (status === 204) {\r\n            toast.success('Event succesfully deleted!', {\r\n              position: toast.POSITION.TOP_CENTER,\r\n            });\r\n            deleteEl.parentNode.innerHTML = '';\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // fetching meeting at first render\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const { data, status } = await eventsSingleton.getEvent();\r\n      if (data) {\r\n        const parsedMeetings = data?.map(event => ({\r\n          id: event.id,\r\n          data: JSON5.parse(event.data),\r\n        }));\r\n        setMeetings(parsedMeetings);\r\n        toast.success(`Events succesfully get with status: ${status}!`, {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n        return;\r\n      }\r\n      toast.success('There are no events in your calendar yet!', {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n      setMeetings([]);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  // filter events by selected participant\r\n  useEffect(() => {\r\n    selectedParticipant\r\n      ? setMeetingsByParticipant(\r\n          meetings.filter(meeting => {\r\n            return meeting.data.participants.includes(selectedParticipant);\r\n          }),\r\n        )\r\n      : setMeetingsByParticipant(meetings);\r\n  }, [selectedParticipant, meetings]);\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <Selector\r\n          selectArray={participants}\r\n          onChange={getParticipant}\r\n          multiple={false}\r\n          selectorName=\"participant\"\r\n        />\r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={!user.isAdmin}\r\n          onClick={() => handleModalShow()}\r\n        >\r\n          Create event\r\n        </Button>\r\n      </div>\r\n      <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            {daysArray.map(day => (\r\n              <th key={day.id}>{day.name}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {timeArray.map((timeObj, index) => {\r\n            const availableMeetings = meetingsByParticipant?.filter(\r\n              meeting => meeting.data.info.time === index,\r\n            );\r\n            const days = new Array(5).fill('');\r\n            availableMeetings?.map(meeting => {\r\n              const { day } = meeting.data.info;\r\n              days[day] = {\r\n                name: `${meeting.data.title}`,\r\n                id: meeting.id,\r\n                className: 'succes',\r\n              };\r\n              return true;\r\n            });\r\n            return (\r\n              <tr key={timeObj.id}>\r\n                <td>{timeObj.name}</td>\r\n                {days.map((day, index) => (\r\n                  <td key={day.id || index} className={styles.td}>\r\n                    {day.name || ''}\r\n                    {day.name && (\r\n                      <Button\r\n                        key={day.id}\r\n                        data-id={day.id}\r\n                        variant=\"info\"\r\n                        disabled={!user.isAdmin}\r\n                        onClick={e => deleteEvent(e)}\r\n                        className={styles.deleteBtn}\r\n                      >\r\n                        x\r\n                      </Button>\r\n                    )}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n      {modalShow && (\r\n        <CreateEventView\r\n          modalShow={modalShow}\r\n          handleSubmit={handleSubmit}\r\n          handleClose={handleModalClose}\r\n          controlOptions={{ participants, daysArray, timeArray }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\nMainView.propTypes = {\r\n  user: PropTypes.object,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}